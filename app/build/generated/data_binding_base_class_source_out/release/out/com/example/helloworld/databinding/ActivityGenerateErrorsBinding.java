// Generated by view binder compiler. Do not edit!
package com.example.helloworld.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.helloworld.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGenerateErrorsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialCardView arithmeticCard;

  @NonNull
  public final TextView arithmeticSectionTitle;

  @NonNull
  public final MaterialButton arrayIndexButton;

  @NonNull
  public final MaterialButton backButton;

  @NonNull
  public final MaterialButton classCastButton;

  @NonNull
  public final MaterialButton classNotFoundButton;

  @NonNull
  public final MaterialButton concurrentModificationButton;

  @NonNull
  public final MaterialCardView customCard;

  @NonNull
  public final MaterialButton customExceptionButton;

  @NonNull
  public final TextView customSectionTitle;

  @NonNull
  public final MaterialButton divisionByZeroButton;

  @NonNull
  public final TextView errorCountTextView;

  @NonNull
  public final MaterialCardView exceptionCard;

  @NonNull
  public final TextView exceptionSectionTitle;

  @NonNull
  public final MaterialButton fileNotFoundButton;

  @NonNull
  public final MaterialCardView fileSystemCard;

  @NonNull
  public final TextView fileSystemSectionTitle;

  @NonNull
  public final ImageView flameImageView;

  @NonNull
  public final View headerBackground;

  @NonNull
  public final MaterialButton illegalAccessButton;

  @NonNull
  public final MaterialButton illegalArgumentButton;

  @NonNull
  public final MaterialButton illegalStateButton;

  @NonNull
  public final MaterialButton indexOutOfBoundsButton;

  @NonNull
  public final MaterialButton instantiationButton;

  @NonNull
  public final MaterialButton invocationTargetButton;

  @NonNull
  public final MaterialButton ioExceptionButton;

  @NonNull
  public final MaterialCardView memoryCard;

  @NonNull
  public final TextView memorySectionTitle;

  @NonNull
  public final MaterialButton negativeArrayButton;

  @NonNull
  public final MaterialButton networkExceptionButton;

  @NonNull
  public final MaterialButton noSuchFieldButton;

  @NonNull
  public final MaterialButton noSuchMethodButton;

  @NonNull
  public final MaterialButton nullPointerButton;

  @NonNull
  public final MaterialButton numberFormatButton;

  @NonNull
  public final MaterialButton outOfMemoryButton;

  @NonNull
  public final MaterialButton overflowButton;

  @NonNull
  public final MaterialCardView rangeCard;

  @NonNull
  public final TextView rangeSectionTitle;

  @NonNull
  public final MaterialCardView reflectionCard;

  @NonNull
  public final TextView reflectionSectionTitle;

  @NonNull
  public final MaterialButton securityExceptionButton;

  @NonNull
  public final MaterialButton stackOverflowButton;

  @NonNull
  public final MaterialCardView statusCard;

  @NonNull
  public final TextView statusTextView;

  @NonNull
  public final MaterialButton stringIndexButton;

  @NonNull
  public final MaterialButton timeoutExceptionButton;

  @NonNull
  public final TextView titleTextView;

  @NonNull
  public final MaterialButton underflowButton;

  @NonNull
  public final MaterialButton unsupportedOperationButton;

  private ActivityGenerateErrorsBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialCardView arithmeticCard, @NonNull TextView arithmeticSectionTitle,
      @NonNull MaterialButton arrayIndexButton, @NonNull MaterialButton backButton,
      @NonNull MaterialButton classCastButton, @NonNull MaterialButton classNotFoundButton,
      @NonNull MaterialButton concurrentModificationButton, @NonNull MaterialCardView customCard,
      @NonNull MaterialButton customExceptionButton, @NonNull TextView customSectionTitle,
      @NonNull MaterialButton divisionByZeroButton, @NonNull TextView errorCountTextView,
      @NonNull MaterialCardView exceptionCard, @NonNull TextView exceptionSectionTitle,
      @NonNull MaterialButton fileNotFoundButton, @NonNull MaterialCardView fileSystemCard,
      @NonNull TextView fileSystemSectionTitle, @NonNull ImageView flameImageView,
      @NonNull View headerBackground, @NonNull MaterialButton illegalAccessButton,
      @NonNull MaterialButton illegalArgumentButton, @NonNull MaterialButton illegalStateButton,
      @NonNull MaterialButton indexOutOfBoundsButton, @NonNull MaterialButton instantiationButton,
      @NonNull MaterialButton invocationTargetButton, @NonNull MaterialButton ioExceptionButton,
      @NonNull MaterialCardView memoryCard, @NonNull TextView memorySectionTitle,
      @NonNull MaterialButton negativeArrayButton, @NonNull MaterialButton networkExceptionButton,
      @NonNull MaterialButton noSuchFieldButton, @NonNull MaterialButton noSuchMethodButton,
      @NonNull MaterialButton nullPointerButton, @NonNull MaterialButton numberFormatButton,
      @NonNull MaterialButton outOfMemoryButton, @NonNull MaterialButton overflowButton,
      @NonNull MaterialCardView rangeCard, @NonNull TextView rangeSectionTitle,
      @NonNull MaterialCardView reflectionCard, @NonNull TextView reflectionSectionTitle,
      @NonNull MaterialButton securityExceptionButton, @NonNull MaterialButton stackOverflowButton,
      @NonNull MaterialCardView statusCard, @NonNull TextView statusTextView,
      @NonNull MaterialButton stringIndexButton, @NonNull MaterialButton timeoutExceptionButton,
      @NonNull TextView titleTextView, @NonNull MaterialButton underflowButton,
      @NonNull MaterialButton unsupportedOperationButton) {
    this.rootView = rootView;
    this.arithmeticCard = arithmeticCard;
    this.arithmeticSectionTitle = arithmeticSectionTitle;
    this.arrayIndexButton = arrayIndexButton;
    this.backButton = backButton;
    this.classCastButton = classCastButton;
    this.classNotFoundButton = classNotFoundButton;
    this.concurrentModificationButton = concurrentModificationButton;
    this.customCard = customCard;
    this.customExceptionButton = customExceptionButton;
    this.customSectionTitle = customSectionTitle;
    this.divisionByZeroButton = divisionByZeroButton;
    this.errorCountTextView = errorCountTextView;
    this.exceptionCard = exceptionCard;
    this.exceptionSectionTitle = exceptionSectionTitle;
    this.fileNotFoundButton = fileNotFoundButton;
    this.fileSystemCard = fileSystemCard;
    this.fileSystemSectionTitle = fileSystemSectionTitle;
    this.flameImageView = flameImageView;
    this.headerBackground = headerBackground;
    this.illegalAccessButton = illegalAccessButton;
    this.illegalArgumentButton = illegalArgumentButton;
    this.illegalStateButton = illegalStateButton;
    this.indexOutOfBoundsButton = indexOutOfBoundsButton;
    this.instantiationButton = instantiationButton;
    this.invocationTargetButton = invocationTargetButton;
    this.ioExceptionButton = ioExceptionButton;
    this.memoryCard = memoryCard;
    this.memorySectionTitle = memorySectionTitle;
    this.negativeArrayButton = negativeArrayButton;
    this.networkExceptionButton = networkExceptionButton;
    this.noSuchFieldButton = noSuchFieldButton;
    this.noSuchMethodButton = noSuchMethodButton;
    this.nullPointerButton = nullPointerButton;
    this.numberFormatButton = numberFormatButton;
    this.outOfMemoryButton = outOfMemoryButton;
    this.overflowButton = overflowButton;
    this.rangeCard = rangeCard;
    this.rangeSectionTitle = rangeSectionTitle;
    this.reflectionCard = reflectionCard;
    this.reflectionSectionTitle = reflectionSectionTitle;
    this.securityExceptionButton = securityExceptionButton;
    this.stackOverflowButton = stackOverflowButton;
    this.statusCard = statusCard;
    this.statusTextView = statusTextView;
    this.stringIndexButton = stringIndexButton;
    this.timeoutExceptionButton = timeoutExceptionButton;
    this.titleTextView = titleTextView;
    this.underflowButton = underflowButton;
    this.unsupportedOperationButton = unsupportedOperationButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGenerateErrorsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGenerateErrorsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_generate_errors, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGenerateErrorsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arithmeticCard;
      MaterialCardView arithmeticCard = ViewBindings.findChildViewById(rootView, id);
      if (arithmeticCard == null) {
        break missingId;
      }

      id = R.id.arithmeticSectionTitle;
      TextView arithmeticSectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (arithmeticSectionTitle == null) {
        break missingId;
      }

      id = R.id.arrayIndexButton;
      MaterialButton arrayIndexButton = ViewBindings.findChildViewById(rootView, id);
      if (arrayIndexButton == null) {
        break missingId;
      }

      id = R.id.backButton;
      MaterialButton backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.classCastButton;
      MaterialButton classCastButton = ViewBindings.findChildViewById(rootView, id);
      if (classCastButton == null) {
        break missingId;
      }

      id = R.id.classNotFoundButton;
      MaterialButton classNotFoundButton = ViewBindings.findChildViewById(rootView, id);
      if (classNotFoundButton == null) {
        break missingId;
      }

      id = R.id.concurrentModificationButton;
      MaterialButton concurrentModificationButton = ViewBindings.findChildViewById(rootView, id);
      if (concurrentModificationButton == null) {
        break missingId;
      }

      id = R.id.customCard;
      MaterialCardView customCard = ViewBindings.findChildViewById(rootView, id);
      if (customCard == null) {
        break missingId;
      }

      id = R.id.customExceptionButton;
      MaterialButton customExceptionButton = ViewBindings.findChildViewById(rootView, id);
      if (customExceptionButton == null) {
        break missingId;
      }

      id = R.id.customSectionTitle;
      TextView customSectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (customSectionTitle == null) {
        break missingId;
      }

      id = R.id.divisionByZeroButton;
      MaterialButton divisionByZeroButton = ViewBindings.findChildViewById(rootView, id);
      if (divisionByZeroButton == null) {
        break missingId;
      }

      id = R.id.errorCountTextView;
      TextView errorCountTextView = ViewBindings.findChildViewById(rootView, id);
      if (errorCountTextView == null) {
        break missingId;
      }

      id = R.id.exceptionCard;
      MaterialCardView exceptionCard = ViewBindings.findChildViewById(rootView, id);
      if (exceptionCard == null) {
        break missingId;
      }

      id = R.id.exceptionSectionTitle;
      TextView exceptionSectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (exceptionSectionTitle == null) {
        break missingId;
      }

      id = R.id.fileNotFoundButton;
      MaterialButton fileNotFoundButton = ViewBindings.findChildViewById(rootView, id);
      if (fileNotFoundButton == null) {
        break missingId;
      }

      id = R.id.fileSystemCard;
      MaterialCardView fileSystemCard = ViewBindings.findChildViewById(rootView, id);
      if (fileSystemCard == null) {
        break missingId;
      }

      id = R.id.fileSystemSectionTitle;
      TextView fileSystemSectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (fileSystemSectionTitle == null) {
        break missingId;
      }

      id = R.id.flameImageView;
      ImageView flameImageView = ViewBindings.findChildViewById(rootView, id);
      if (flameImageView == null) {
        break missingId;
      }

      id = R.id.headerBackground;
      View headerBackground = ViewBindings.findChildViewById(rootView, id);
      if (headerBackground == null) {
        break missingId;
      }

      id = R.id.illegalAccessButton;
      MaterialButton illegalAccessButton = ViewBindings.findChildViewById(rootView, id);
      if (illegalAccessButton == null) {
        break missingId;
      }

      id = R.id.illegalArgumentButton;
      MaterialButton illegalArgumentButton = ViewBindings.findChildViewById(rootView, id);
      if (illegalArgumentButton == null) {
        break missingId;
      }

      id = R.id.illegalStateButton;
      MaterialButton illegalStateButton = ViewBindings.findChildViewById(rootView, id);
      if (illegalStateButton == null) {
        break missingId;
      }

      id = R.id.indexOutOfBoundsButton;
      MaterialButton indexOutOfBoundsButton = ViewBindings.findChildViewById(rootView, id);
      if (indexOutOfBoundsButton == null) {
        break missingId;
      }

      id = R.id.instantiationButton;
      MaterialButton instantiationButton = ViewBindings.findChildViewById(rootView, id);
      if (instantiationButton == null) {
        break missingId;
      }

      id = R.id.invocationTargetButton;
      MaterialButton invocationTargetButton = ViewBindings.findChildViewById(rootView, id);
      if (invocationTargetButton == null) {
        break missingId;
      }

      id = R.id.ioExceptionButton;
      MaterialButton ioExceptionButton = ViewBindings.findChildViewById(rootView, id);
      if (ioExceptionButton == null) {
        break missingId;
      }

      id = R.id.memoryCard;
      MaterialCardView memoryCard = ViewBindings.findChildViewById(rootView, id);
      if (memoryCard == null) {
        break missingId;
      }

      id = R.id.memorySectionTitle;
      TextView memorySectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (memorySectionTitle == null) {
        break missingId;
      }

      id = R.id.negativeArrayButton;
      MaterialButton negativeArrayButton = ViewBindings.findChildViewById(rootView, id);
      if (negativeArrayButton == null) {
        break missingId;
      }

      id = R.id.networkExceptionButton;
      MaterialButton networkExceptionButton = ViewBindings.findChildViewById(rootView, id);
      if (networkExceptionButton == null) {
        break missingId;
      }

      id = R.id.noSuchFieldButton;
      MaterialButton noSuchFieldButton = ViewBindings.findChildViewById(rootView, id);
      if (noSuchFieldButton == null) {
        break missingId;
      }

      id = R.id.noSuchMethodButton;
      MaterialButton noSuchMethodButton = ViewBindings.findChildViewById(rootView, id);
      if (noSuchMethodButton == null) {
        break missingId;
      }

      id = R.id.nullPointerButton;
      MaterialButton nullPointerButton = ViewBindings.findChildViewById(rootView, id);
      if (nullPointerButton == null) {
        break missingId;
      }

      id = R.id.numberFormatButton;
      MaterialButton numberFormatButton = ViewBindings.findChildViewById(rootView, id);
      if (numberFormatButton == null) {
        break missingId;
      }

      id = R.id.outOfMemoryButton;
      MaterialButton outOfMemoryButton = ViewBindings.findChildViewById(rootView, id);
      if (outOfMemoryButton == null) {
        break missingId;
      }

      id = R.id.overflowButton;
      MaterialButton overflowButton = ViewBindings.findChildViewById(rootView, id);
      if (overflowButton == null) {
        break missingId;
      }

      id = R.id.rangeCard;
      MaterialCardView rangeCard = ViewBindings.findChildViewById(rootView, id);
      if (rangeCard == null) {
        break missingId;
      }

      id = R.id.rangeSectionTitle;
      TextView rangeSectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (rangeSectionTitle == null) {
        break missingId;
      }

      id = R.id.reflectionCard;
      MaterialCardView reflectionCard = ViewBindings.findChildViewById(rootView, id);
      if (reflectionCard == null) {
        break missingId;
      }

      id = R.id.reflectionSectionTitle;
      TextView reflectionSectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (reflectionSectionTitle == null) {
        break missingId;
      }

      id = R.id.securityExceptionButton;
      MaterialButton securityExceptionButton = ViewBindings.findChildViewById(rootView, id);
      if (securityExceptionButton == null) {
        break missingId;
      }

      id = R.id.stackOverflowButton;
      MaterialButton stackOverflowButton = ViewBindings.findChildViewById(rootView, id);
      if (stackOverflowButton == null) {
        break missingId;
      }

      id = R.id.statusCard;
      MaterialCardView statusCard = ViewBindings.findChildViewById(rootView, id);
      if (statusCard == null) {
        break missingId;
      }

      id = R.id.statusTextView;
      TextView statusTextView = ViewBindings.findChildViewById(rootView, id);
      if (statusTextView == null) {
        break missingId;
      }

      id = R.id.stringIndexButton;
      MaterialButton stringIndexButton = ViewBindings.findChildViewById(rootView, id);
      if (stringIndexButton == null) {
        break missingId;
      }

      id = R.id.timeoutExceptionButton;
      MaterialButton timeoutExceptionButton = ViewBindings.findChildViewById(rootView, id);
      if (timeoutExceptionButton == null) {
        break missingId;
      }

      id = R.id.titleTextView;
      TextView titleTextView = ViewBindings.findChildViewById(rootView, id);
      if (titleTextView == null) {
        break missingId;
      }

      id = R.id.underflowButton;
      MaterialButton underflowButton = ViewBindings.findChildViewById(rootView, id);
      if (underflowButton == null) {
        break missingId;
      }

      id = R.id.unsupportedOperationButton;
      MaterialButton unsupportedOperationButton = ViewBindings.findChildViewById(rootView, id);
      if (unsupportedOperationButton == null) {
        break missingId;
      }

      return new ActivityGenerateErrorsBinding((ConstraintLayout) rootView, arithmeticCard,
          arithmeticSectionTitle, arrayIndexButton, backButton, classCastButton,
          classNotFoundButton, concurrentModificationButton, customCard, customExceptionButton,
          customSectionTitle, divisionByZeroButton, errorCountTextView, exceptionCard,
          exceptionSectionTitle, fileNotFoundButton, fileSystemCard, fileSystemSectionTitle,
          flameImageView, headerBackground, illegalAccessButton, illegalArgumentButton,
          illegalStateButton, indexOutOfBoundsButton, instantiationButton, invocationTargetButton,
          ioExceptionButton, memoryCard, memorySectionTitle, negativeArrayButton,
          networkExceptionButton, noSuchFieldButton, noSuchMethodButton, nullPointerButton,
          numberFormatButton, outOfMemoryButton, overflowButton, rangeCard, rangeSectionTitle,
          reflectionCard, reflectionSectionTitle, securityExceptionButton, stackOverflowButton,
          statusCard, statusTextView, stringIndexButton, timeoutExceptionButton, titleTextView,
          underflowButton, unsupportedOperationButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
